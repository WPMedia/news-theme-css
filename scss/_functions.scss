@import 'variables';
// Scss Functions
//
// Styleguide 1.3.0


// @function to-number($value)
//
// Casts a string into a number
//
// $value:    Value to be parsed
//
// Styleguide 1.3.1
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @warn ('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i)); }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

// @function to-length($value, $unit)
//
// Add `$unit` to `$value`
//
// $value:    Value to add unit to
// $unit:   String representation of the unit
//
// Styleguide 1.3.2
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    @warn ('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

// @function strip-unit($number)
//
// Remove the unit of a length
//
// $number:   Number to remove unit from
//
// Styleguide 1.3.3
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// @function get-half-in-rems($size)
//
// Divide value by 2
//
// $size:   Number to halve
//
// Styleguide 1.3.4
@function get-half-in-rems($size) {
  $test: to-number($size);
  $half: ($test / 2);
  @return $half;
}


// @function calculateRem($size)
//
// Function for converting a px based size to rem.
//
// $size:   Can be either a number or string with the 'px' added
//
// Styleguide 1.3.5
@function calculateRem($size) {
  $size: strip-unit($size);
  $remSize: $size / $default-font-size;
  @return #{$remSize}rem;
}
